# output is not super well-structured in the txt files on tacc but it is consistent
#   later can go back and figure out a more logical way to generate these
#   but for now hard-coded will work fine


### SYMMETRY ###

def pull_across_symm_indices(triad):
    across_indices = [[9, 12, 15, 18, 21, 24, 27, 30, 33, 45, 48, 51, 54, 57,
                       60, 63, 66, 69, 81, 84, 87, 90, 93, 96, 99, 102, 105],
                      [0, 3, 6, 19, 22, 25, 28, 31, 34, 36, 39, 42, 55, 58, 61,
                       64, 67, 70, 72, 75, 78, 91, 94, 97, 100, 103, 106],
                      [1, 4, 7, 10, 13, 16, 29, 32, 35, 37, 40, 43, 46, 49, 52,
                       65, 68, 71, 73, 76, 79, 82, 85, 88, 101, 104, 107],
                      [2, 5, 8, 11, 14, 17, 20, 23, 26, 38, 41, 44, 47, 50, 53,
                       56, 59, 62, 74, 77, 80, 83, 86, 89, 92, 95, 98]]
    return across_indices[(triad-1)]

def pull_within_symm_indices(triad):
    start = (triad - 1) * 3
    return [start + i + j * 12 for j in range(3) for i in range(3)]
    # within_indices = [[0, 1, 2, 12, 13, 14, 24, 25, 26],
    #                   [3, 4, 5, 15, 16, 17, 27, 28, 29],
    #                   [6, 7, 8, 18, 19, 20, 30, 31, 32],
    #                   [9, 10, 11, 21, 22, 23, 33, 34, 35]]


# for full triplet
def pull_within_ABC_symm_indices(triad):
    indices = [[0, 4, 8, 12, 13, 20, 21, 28, 29, 144, 148, 152, 156, 157, 164,
                165, 172, 173, 288, 292, 296, 300, 301, 308, 309, 316, 317],
               [37, 41, 45, 50, 51, 58, 59, 66, 67, 181, 185, 189, 194, 195, 202,
                203, 210, 211, 325, 329, 333, 338, 339, 346, 347, 354, 355],
               [74, 78, 82, 88, 89, 96, 97, 104, 105, 218, 222, 226, 232, 233,
               240, 241, 248, 249, 362, 366, 370, 376, 377, 384, 385, 392, 393],
                [111, 115, 119, 126, 127, 134, 135, 142, 143, 255, 259, 263, 270,
                  271, 278, 279, 286, 287, 399, 403, 407, 414, 415, 422, 423, 430, 431]]
    return indices[triad-1]

def pull_across_ABC_symm_indices(triad):
    indices = [[36, 40, 44, 48, 49, 56, 57, 64, 65, 72, 76, 80, 84, 85, 92, 93, 100, 101, 108, 112, 116, 120, 121, 128, 129, 136, 137, 180, 184, 188, 192, 193, 200, 201, 208, 209, 216, 220, 224, 228, 229, 236, 237, 244, 245, 252, 256, 260, 264, 265, 272, 273, 280, 281, 324, 328, 332, 336, 337, 344, 345, 352, 353, 360, 364, 368, 372, 373, 380, 381, 388, 389, 396, 400, 404, 408, 409, 416, 417, 424, 425],
               [1, 5, 9, 14, 15, 22, 23, 30, 31, 73, 77, 81, 86, 87, 94, 95, 102, 103, 109, 113, 117, 122, 123, 130, 131, 138, 139, 145, 149, 153, 158, 159, 166, 167, 174, 175, 217, 221, 225, 230, 231, 238, 239, 246, 247, 253, 257, 261, 266, 267, 274, 275, 282, 283, 289, 293, 297, 302, 303, 310, 311, 318, 319, 361, 365, 369, 374, 375, 382, 383, 390, 391, 397, 401, 405, 410, 411, 418, 419, 426, 427],
               [2, 6, 10, 16, 17, 24, 25, 32, 33, 38, 42, 46, 52, 53, 60, 61, 68, 69, 110, 114, 118, 124, 125, 132, 133, 140, 141, 146, 150, 154, 160, 161, 168, 169, 176, 177, 182, 186, 190, 196, 197, 204, 205, 212, 213, 254, 258, 262, 268, 269, 276, 277, 284, 285, 290, 294, 298, 304, 305, 312, 313, 320, 321, 326, 330, 334, 340, 341, 348, 349, 356, 357, 398, 402, 406, 412, 413, 420, 421, 428, 429],
                [3, 7, 11, 18, 19, 26, 27, 34, 35, 39, 43, 47, 54, 55, 62, 63, 70, 71, 75, 79, 83, 90, 91, 98, 99, 106, 107, 147, 151, 155, 162, 163, 170, 171, 178, 179, 183, 187, 191, 198, 199, 206, 207, 214, 215, 219, 223, 227, 234, 235, 242, 243, 250, 251, 291, 295, 299, 306, 307, 314, 315, 322, 323, 327, 331, 335, 342, 343, 350, 351, 358, 359, 363, 367, 371, 378, 379, 386, 387, 394, 395]]
    return indices[triad-1]


def pull_within_symm_indices_droprun(triad):
    start = (triad - 1) * 2  # Each triad starts at (triad - 1) * 2
    indices = [(start + i, start + i + 8, start + i + 16) for i in range(2)]
    return [num for pair in indices for num in pair]


def pull_across_symm_indices_droprun(triad):
    across_indices = [[6, 9, 12, 15, 18, 21, 30, 33, 36, 39, 42, 45, 54, 57, 60, 63, 66, 69],
                      [0, 3, 13, 16, 19, 22, 24, 27, 37, 40, 43, 46, 48, 51, 61, 64, 67, 70],
                      [1, 4, 7, 10, 20, 23, 25, 28, 31, 34, 44, 47, 49, 52, 55, 58, 68, 71],
                      [2, 5, 8, 11, 14, 17, 26, 29, 32, 35, 38, 41, 50, 53, 56, 59, 62, 65]]
    return across_indices[(triad-1)]

def pull_within_ABC_symm_indices_droprun(triad):
    indices = [[0, 4, 8, 9, 16, 17, 96, 100, 104, 105, 112, 113, 192, 196, 200, 201, 208, 209],
               [25, 29, 34, 35, 42, 43, 121, 125, 130, 131, 138, 139, 217, 221, 226, 227, 234, 235],
               [50, 54, 60, 61, 68, 69, 146, 150, 156, 157, 164, 165, 242, 246, 252, 253, 260, 261],
                [75, 79, 86, 87, 94, 95, 171, 175, 182, 183, 190, 191, 267, 271, 278, 279, 286, 287]]
    return indices[triad-1]

def pull_across_ABC_symm_indices_droprun(triad):
    indices = [[24, 28, 32, 33, 40, 41, 48, 52, 56, 57, 64, 65, 72, 76, 80, 81, 88, 89, 120, 124, 128, 129, 136, 137, 144, 148, 152, 153, 160, 161, 168, 172, 176, 177, 184, 185, 216, 220, 224, 225, 232, 233, 240, 244, 248, 249, 256, 257, 264, 268, 272, 273, 280, 281],
               [1, 5, 10, 11, 18, 19, 49, 53, 58, 59, 66, 67, 73, 77, 82, 83, 90, 91, 97, 101, 106, 107, 114, 115, 145, 149, 154, 155, 162, 163, 169, 173, 178, 179, 186, 187, 193, 197, 202, 203, 210, 211, 241, 245, 250, 251, 258, 259, 265, 269, 274, 275, 282, 283],
               [2, 6, 12, 13, 20, 21, 26, 30, 36, 37, 44, 45, 74, 78, 84, 85, 92, 93, 98, 102, 108, 109, 116, 117, 122, 126, 132, 133, 140, 141, 170, 174, 180, 181, 188, 189, 194, 198, 204, 205, 212, 213, 218, 222, 228, 229, 236, 237, 266, 270, 276, 277, 284, 285],
                [3, 7, 14, 15, 22, 23, 27, 31, 38, 39, 46, 47, 51, 55, 62, 63, 70, 71, 99, 103, 110, 111, 118, 119, 123, 127, 134, 135, 142, 143, 147, 151, 158, 159, 166, 167, 195, 199, 206, 207, 214, 215, 219, 223, 230, 231, 238, 239, 243, 247, 254, 255, 262, 263]]
    return indices[triad-1]



### PREPOST ###

# takes in an int 1, 2, 3, or 4; works for any AB, AC, or BC pairing
def pull_within_prepost_indices(triad):
    indices = []
    for comp_run in range(4):
        indices.append((triad - 1) * 4 + comp_run)

    for comp_run in range(2):
        indices.append(16 + (triad - 1) * 2 + comp_run)
    return indices


# takes in an int 1, 2, 3, or 4
def pull_across_prepost_indices(triad):
    indices = []
    start_1 = (triad - 1) * 12
    indices.extend(range(start_1, start_1 + 12))
    start_2 = 48 + (triad - 1) * 6
    indices.extend(range(start_2, start_2 + 6))
    return indices






def pull_within_ABC_prepost_indices(triad):
    indices = [[0, 1, 8, 9, 16, 17, 24, 25, 32, 33, 40, 41, 192, 193, 200, 201, 208, 209],
               [50, 51, 58, 59, 66, 67, 74, 75, 82, 83, 90, 91, 218, 219, 226, 227, 234, 235],
               [100, 101, 108, 109, 116, 117, 124, 125, 132, 133, 140, 141, 244, 245, 252, 253, 260, 261],
                [150, 151, 158, 159, 166, 167, 174, 175, 182, 183, 190, 191, 270, 271, 278, 279, 286, 287]]
    return indices[triad-1]

def pull_across_ABC_prepost_indices(triad):
    indices = [[2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215],
               [48, 49, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239],
               [96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 142, 143, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 262, 263],
                [144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285]]
    return indices[triad-1]









# takes in an int 1, 2, 3, or 4
def pull_within_prepost_indices_droprun(triad):
    start = (triad*2)-2
    indices = [start, start + 1]
    return indices

def pull_across_prepost_indices_droprun(triad):
    start = (triad-1) * 6
    indices = list(range(start, start + 6))
    return indices

def pull_within_ABC_prepost_indices_droprun(triad):
    indices = [[0, 1, 8, 9, 16, 17],
               [26, 27, 34, 35, 42, 43],
               [52, 53, 60, 61, 68, 69],
                [78, 79, 86, 87, 94, 95]]
    return indices[triad-1]


def pull_across_ABC_prepost_indices_droprun(triad):
    indices = [[2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23],
               [24, 25, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47],
               [48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 70, 71],
                [72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93]]
    return indices[triad-1]